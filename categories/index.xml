<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Categories on TheDevtop</title>
    <link>https://thedevtop.github.io/categories/</link>
    <description>Recent content in Categories on TheDevtop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://thedevtop.github.io/categories/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Software Defined Automatic Calculator</title>
      <link>https://thedevtop.github.io/software-defined-automatic-calculator/</link>
      <pubDate>Thu, 26 Oct 2023 11:21:43 +0200</pubDate>
      
      <guid>https://thedevtop.github.io/software-defined-automatic-calculator/</guid>
      <description>&lt;p&gt;This article is about SDAC.
It is a program that takes in a LISP-like language, and prints out a sequence of evaluated statements.
Here we compute the answer to everything:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mul&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;exp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This looks very simple and it is; even cooler, the implementation is as simple.&lt;/p&gt;
&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;
&lt;p&gt;At the basis of SDAC there is the Program type.
A &amp;ldquo;Program&amp;rdquo; can be either be a value (signed word), or an expression.
Then there are two functions, the detection function, and the evalutation function.
The detection function matches the type of the program;
if the program is a value we return that value, if it is an expression we evaluate that expression.
The evalutation function matches and executes the expression, returning a value.&lt;/p&gt;
&lt;p&gt;Doing this in a recursive fashion opens up the possibility to write real programs by compositing expressions.&lt;/p&gt;
&lt;h3 id=&#34;lisp-the-soul-of-a-new-machine&#34;&gt;LISP: The soul of a new machine&lt;/h3&gt;
&lt;p&gt;To be true to myself, I know some LISP, but I never learned it formally from first principles.
So that is what I will be doing.
And who knows, maybe I will write an article about my experience learning LISP &lt;em&gt;(This is unapologetic foreshadowing)&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;sources&#34;&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/42_(number)#The_Hitchhiker&#39;s_Guide_to_the_Galaxy&#34;&gt;The answer to everything (Wiki)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TheDevtop/sdac/tree/main&#34;&gt;SDAC (GitHub)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lisp_(programming_language)&#34;&gt;Lisp (Wiki)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Compose files with macros</title>
      <link>https://thedevtop.github.io/compose-files-with-macros/</link>
      <pubDate>Wed, 11 Oct 2023 22:48:05 +0200</pubDate>
      
      <guid>https://thedevtop.github.io/compose-files-with-macros/</guid>
      <description>&lt;p&gt;This article is about a program I wrote to compose text files via macros.
The macros are based on file names, and they are parsed by a compiled regular expression.
I wrote this program because I wanted the capability of a templating engine, but with the simplicity of &lt;code&gt;$ cat&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;macros&#34;&gt;Macros&lt;/h3&gt;
&lt;p&gt;Macros are a set of symbols, that (when called) will expand to a certain output.
This definition applies very well to fcmpose.
In fcmpose, macros expand to the contents of their files.
So the macro &lt;code&gt;$foo$&lt;/code&gt; will expand to the content of &lt;code&gt;./foo&lt;/code&gt;.
Do note that this expansion is recursive, and infinite recursion will result in a stack overflow.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t let the content of &lt;code&gt;./foo&lt;/code&gt; be &lt;code&gt;Hello, %foo%!&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;regular-expressions&#34;&gt;Regular expressions&lt;/h3&gt;
&lt;p&gt;To search for our macros I make use of two regular expressions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Major:    &lt;code&gt;\$[a-zA-Z0-9\/\.]+\$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Minor:    &lt;code&gt;[\/a-zA-Z0-9\.]+&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Major finds the actual macro, while minor finds the file path inside the macro.
To compile these regular expressions I use the std/regexp package, which implements the RE2 engine by Russ Cox.&lt;/p&gt;
&lt;p&gt;I could talk about regular expressions all day, but that is not the point of this article.
And I will end up writing an article about formal grammers and automata anyway.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I enjoyed writing this program, because it made me understand some foundational concepts even better.
And the program ended up the way I wanted: Simple and expressive.&lt;/p&gt;
&lt;h3 id=&#34;sources&#34;&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://man.netbsd.org/cat.1&#34;&gt;Manual: cat(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://swtch.com/~rsc/regexp/&#34;&gt;Russ Cox: RE2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Macro_(computer_science)&#34;&gt;Wikipedia: Macros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TheDevtop/fcmpose&#34;&gt;GitHub: Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Lip service to a LISP serializer</title>
      <link>https://thedevtop.github.io/lip-service-to-a-lisp-serializer/</link>
      <pubDate>Tue, 10 Oct 2023 18:16:31 +0200</pubDate>
      
      <guid>https://thedevtop.github.io/lip-service-to-a-lisp-serializer/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Rembrandt&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;van Rijn&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Johannes&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Vermeer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Jheronimus&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Bosch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Frans&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hals&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Simple, compact, expressive&amp;hellip; Beautiful!&lt;/p&gt;
&lt;h3 id=&#34;lisp-in-the-sky-with-diamonds&#34;&gt;Lisp in the Sky with Diamonds&lt;/h3&gt;
&lt;p&gt;That what you witnessed above, is not real Lisp.
Or at least it was not produced by real Lisp&amp;hellip;&lt;/p&gt;
&lt;p&gt;I confess, I have been experimenting with &lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust&lt;/a&gt; again.
This time I started by visiting the website of &lt;a href=&#34;https://serde.rs/&#34;&gt;Serde&lt;/a&gt;.
When I landed on the homepage I saw a list of data formats implemented for Serde.
I recognized many names, all the many that I have used before.
But one stood out to me, this one was the &lt;a href=&#34;https://en.wikipedia.org/wiki/S-expression&#34;&gt;S-Expression&lt;/a&gt; format.
I have heard of its potency;
I have heard that it can make you understand, things you have never understood before.&lt;/p&gt;
&lt;p&gt;I took a handfull of parentheses, and I took them whole.
When the lights went finally out, I experienced the highest of intellectual highs.
The realm of computation is a wonderous plain, and one day you will find it too.&lt;/p&gt;
&lt;h3 id=&#34;s-expressions&#34;&gt;S-Expressions&lt;/h3&gt;
&lt;p&gt;So, I have discovered S-Expressions as (de)serialized by Rust&amp;rsquo;s Serde.
S-Expressions are the symbolic form of Lisp objects, similair to what &lt;a href=&#34;https://www.json.org/json-en.html&#34;&gt;JSON&lt;/a&gt; is to JavaScript.
But while JSON objects are primarily for data, S-Expressions can also be used for &lt;em&gt;code&lt;/em&gt;.
Which means that S-Expressions can be used to create small/domain-specific programming languages,
to implement various forms of automata,
or to use as syntactically interesting key/value stores.&lt;/p&gt;
&lt;h3 id=&#34;rusty-calculators&#34;&gt;Rusty calculators&lt;/h3&gt;
&lt;p&gt;I will continue this experiment, and see if I can write a language that can do basic arithmatic.
About which I will undoubtedly write about.&lt;/p&gt;
&lt;p&gt;For now get yourself a copy of &lt;a href=&#34;https://github.com/rotty/lexpr-rs&#34;&gt;lexpr-rs&lt;/a&gt;, and see where it will take you.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Hicking with NetBSD</title>
      <link>https://thedevtop.github.io/hicking-with-netbsd/</link>
      <pubDate>Thu, 05 Oct 2023 20:51:33 +0200</pubDate>
      
      <guid>https://thedevtop.github.io/hicking-with-netbsd/</guid>
      <description>&lt;p&gt;This last semester, I have been spending much time with NetBSD.
In this article I will tell you about the adventures, and how it has developed me as a programmer.&lt;/p&gt;
&lt;h3 id=&#34;over-the-fence-off-the-wall&#34;&gt;Over the fence, off the wall&lt;/h3&gt;
&lt;p&gt;So a while ago, a good colleague of mine wrote a Linux kernel module for fun and exercise.
This module is called &lt;a href=&#34;https://github.com/DiederikDeZee/schutting&#34;&gt;/dev/schutting&lt;/a&gt;, and it is a /dev/null clone.
The term &amp;lsquo;schutting&amp;rsquo; meaning &amp;lsquo;fence&amp;rsquo; in Dutch, is a reference to the proverb &amp;ldquo;Over de schutting gooien&amp;rdquo; which means:
Making something not &lt;strong&gt;your&lt;/strong&gt; problem anymore.&lt;/p&gt;
&lt;p&gt;Because I thought this was a really interesting exercise, I decided to port /dev/schutting to NetBSD.
I started with an empty C source file, and I looked up the function signatures for device open(), read(), write(), and close();
which I implemented with the functionality of /dev/null.
Funny enough, the first try did not succeed.&lt;/p&gt;
&lt;p&gt;The thing is that the build system is both very good, and very weird.
It does not want you to be creative with naming certain functions, specifically the device attach function;
in my case &lt;code&gt;void schuttingattach(int);&lt;/code&gt;.
If you turn it into &lt;code&gt;schutting_attach()&lt;/code&gt; or &lt;code&gt;SchuttingAttach()&lt;/code&gt; all will be fine&amp;hellip;
Until the linking phase comes, then the compiler will scream at you without telling you what is actually going on!&lt;/p&gt;
&lt;p&gt;After spending the saturday evening figuring out why things where not working, I discovered proper spelling and the building of the kernel succeeded. After a short reboot and a couple of attempts with &lt;a href=&#34;https://man.netbsd.org/mknod.8&#34;&gt;mknod(8)&lt;/a&gt; I had a working /dev/schutting. Overall this project was really fun.&lt;/p&gt;
&lt;p&gt;Finally, I want to thank my colleague for his encouragement regarding projects like these.&lt;/p&gt;
&lt;h3 id=&#34;chroot-environments&#34;&gt;Chroot environments&lt;/h3&gt;
&lt;p&gt;As my personal project this semester, I choose to implement a container-like runtime called: &lt;a href=&#34;https://github.com/TheDevtop/rootve&#34;&gt;RootVE&lt;/a&gt;.
It works similair to &lt;a href=&#34;https://containerd.io/&#34;&gt;containerd&lt;/a&gt;, and makes much use of facilities found in NetBSD.
RootVE can create environments for both interactive and background services/applications.
It does this by leveraging terminal control groups.
I even implemented (altough not that elegant) networking.&lt;/p&gt;
&lt;p&gt;At the time of writing, RootVE does contain some inelegances and inconsistencies.
But considering the entire system is written in less then 1000 lines of code, I would say it pretty complete.
I really enjoyed this project, because it made me reach the limit of what Go could teach me about programming.&lt;/p&gt;
&lt;h3 id=&#34;pipes-ports-and-channels&#34;&gt;Pipes, Ports, and Channels&lt;/h3&gt;
&lt;p&gt;I like tinkering on &lt;em&gt;de novo&lt;/em&gt; operating systems, and one of such systems is &lt;a href=&#34;https://9p.io/plan9/&#34;&gt;Plan 9&lt;/a&gt;.
Plan 9 has this device called &lt;a href=&#34;https://9p.io/magic/man2html?man=srv&amp;amp;sect=3&#34;&gt;srv(3)&lt;/a&gt; which is a registry for file descriptor backed channels.
Altough NetBSD does not have such a device, it does have two component parts: tmpfs, and pipes.&lt;/p&gt;
&lt;p&gt;So I wrote a couple of scripts:
One would mount a tmpfs on &lt;code&gt;/srv&lt;/code&gt; at startup, the other a shell library that implements functions for (de)registering pipes.&lt;/p&gt;
&lt;p&gt;I realised I could do the same for sockets.
For good meassure (and use in RootVE), I wrote a Go package and put all of it into a single repository called &lt;a href=&#34;https://github.com/TheDevtop/ipcfs&#34;&gt;ipcfs&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>UVM: A secret love letter</title>
      <link>https://thedevtop.github.io/uvm-a-secret-love-letter/</link>
      <pubDate>Tue, 03 Oct 2023 19:25:35 +0200</pubDate>
      
      <guid>https://thedevtop.github.io/uvm-a-secret-love-letter/</guid>
      <description>&lt;p&gt;Recently, I had some DIMM corruption, which led me to decommission one of my machines.
The hole situation got me thinking about the fragility of software and how not even the most elegant abstraction, can save you from the grim reality of hardware failure.
It also happens to be a good reason to talk about one of my favorite pieces of software: &lt;a href=&#34;https://www.usenix.org/legacy/event/usenix99/full_papers/cranor/cranor.pdf&#34;&gt;The UVM Virtual Memory System&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;let-there-be-light&#34;&gt;Let there be light&lt;/h3&gt;
&lt;p&gt;UVM is the virtual memory subsystem used in the kernels of &lt;a href=&#34;https://www.openbsd.org/&#34;&gt;OpenBSD&lt;/a&gt; and &lt;a href=&#34;https://www.netbsd.org/&#34;&gt;NetBSD&lt;/a&gt;.
It was written to replace the old (4.4BSD) virtual memory subsystem, which was a modified version of the one found in Carnegie Mellon&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Mach_(kernel)&#34;&gt;Mach&lt;/a&gt; microkernel.
The reason for replacement was straightforward: Poor performance, complex data structures, and poor documentation.
Which is quite funny because today (2023) the best documentation I could find about the Mach VM comes from &lt;a href=&#34;https://developer.apple.com/documentation/kernel/mach/vm&#34;&gt;Apple&lt;/a&gt; and &lt;a href=&#34;http://web.mit.edu/darwin/src/modules/xnu/osfmk/man/&#34;&gt;MIT&lt;/a&gt;, not from Carnegie Mellon.&lt;/p&gt;
&lt;p&gt;The reason for UVM is the classic triad: Simplicity, performance, and maintainability.&lt;/p&gt;
&lt;h3 id=&#34;masters-of-architecture&#34;&gt;Masters of architecture&lt;/h3&gt;
&lt;p&gt;Having a great VM implementation is one thing, but having a great paper to companion it is something else entirely.
With UVM, Cranor and Parulkar give us both.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thedevtop.github.io/uvm_arch.png&#34; alt=&#34;uvm_arch&#34;&gt;
The architecture is easy to understand.
The &lt;em&gt;vmspace&lt;/em&gt; structure contains pointers to a process’s &lt;em&gt;pmap&lt;/em&gt; and &lt;em&gt;memory map&lt;/em&gt; structures, it also contains some statistics.
The &lt;em&gt;pmap&lt;/em&gt; is the machine-dependent structure, while the &lt;em&gt;memory map&lt;/em&gt; is the machine-independent structure that holds the memory objects.&lt;/p&gt;
&lt;p&gt;Some observations: The various segments (text/data/stack) are seperate objects, which is beneficial for security.
The objects can be of different types, and backed different &lt;em&gt;pagers&lt;/em&gt;.
The important thing here, is that these types and pagers can be implemented by &lt;strong&gt;other&lt;/strong&gt; kernel subsystems (I think this is really cool).
Finally, UVM allows for anonymous mapping, which is usefull if you have two processes that map the same object (like the text segment of &lt;code&gt;/bin/sh&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&#34;the-sound-of-memory&#34;&gt;The sound of memory&lt;/h3&gt;
&lt;p&gt;Wether it&amp;rsquo;s kmalloc() or mmap(), in the end they all function because of UVM.
And because UVM presents a simple and consistent interface, it will remain one of my favorite pieces of software.&lt;/p&gt;
&lt;h3 id=&#34;sources&#34;&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NetBSD/src/tree/trunk/sys/uvm&#34;&gt;NetBSD Kernel/UVM (Source)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openbsd/src/tree/master/sys/uvm&#34;&gt;OpenBSD Kernel/UVM (Source)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openmach/openmach/tree/master/kernel/vm&#34;&gt;OpenMach VM (Source)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/legacy/events/usenix2000/freenix/full_papers/silvers/silvers.pdf&#34;&gt;Unified Buffer Cache (Paper)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    
  </channel>
</rss>
